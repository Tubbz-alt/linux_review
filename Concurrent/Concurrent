有8种方式使进程终止，其中前5种为正常终止，它们是
1：从 main 返回
2：调用 exit   线程还没有来得及被调度，进程就结束了
3：调用 _exit 或 _Exit
4：最后一个线程从其启动例程返回
5：最后一个线程调用 pthread_exit
异常终止有3种，它们是
6：调用 abort
7：接到一个信号并终止
8：最后一个线程对取消请求做出响应

并发（信号、线程）
信号是初步异步
线程是强烈异步


一：信号

1：信号是什么？
信号是软件层面的中断
中断是底层的
信号是应用层面的

信号的相应依赖于中断这个机制

并发：同步 异步 

异步事件处理
(例如单核) 时间片会轮流调度多个进程    大脑是真正的异步

1：查询法    
2：通知法


2：信号函数
singal();
void (*signal(int signum,void (*func)(int)))(int);   

一、SIGINT、SIGTERM和SIGKILL区别

SIGINT与SIGTERM区别
1）SIGINT关联ctrl+c
2）SIGINT只能结束前台进程
3）通过ctrl+c对当前进程发送结束信号，信号被进程树接收到（即：不仅当前进程，子进程也会收到结束信号）
SIGTERM与SIGKILL
1）SIGTERM可以被阻塞、处理和忽略；因此有的进程不能按预期的结束
2）kill不使用参数：发送SIGTERM信号，只有当前进程收到信号，若当前进程被kill，则子进程的父进程就会更改为init，即pid为1
3）kill命令的默认不带参数发生的信号就是SIGTERM，让程序友好的退出 ，当程序未退出时，可以使用kill -9强制退出

信号会打断阻塞的系统调用


3:信号的不可靠
标准信号会丢失

信号不可靠是信号的行为不可靠
有可能是内核布置的，有可能第一次调用还没有结束的时候就发生了第二次调用

4：可重入函数
第一次调用还没有结束就发生了第二次调用，这样的现象称为重入函数
所有的系统调用都是可重入的，一部分库函数也是可重入的，如：memcpy memmove
例如：rand_r 就是不可重入的

5：信号的响应过程

内核为每一组进程维护了最少2个位图
1:mask
2pending
理论上这两个都是32位的，是标准信号的大小

信号从收到到响应有个不可避免的延迟
因为有中断将正在执行的信号打断，信号是从kernel 回到 user的路上相应的

思考：
信号如何忽略掉的
标准信号可以忽略掉
将mask位值为零

标准信号为什么要丢失？
来一万个信号置为1还是1

  6:信号常用函数
  kill()  //发信号的 kill函数   send signal to a process
raise() //给当前进程或线程发信号    
  alarm() 程序有了准确点的概念     计时函数  alarm 无法进行一个多任务的计时器 
  为什么要少用sleep函数呢，因为在有的环境下sleep是alarm + pause 函数封装的

  alarm 这个函数计数比较僵硬 ，可用setitime代替

  volatile  遇到这个数值的真正的空间去取数值，不要相信在内存中的存放

  一般sleep是nanosleep下封装的 

  pause() 
  abort()
  system()
sleep()
  7:信号集
  信号的集合

  sigemptyset
   信号集的类型sigset_t
  int sigemptyset(sigset_t *set);

  int sigfillset(sigset_t *set);

  int sigaddset(sigset_t *set, int signum);

  int sigdelset(sigset_t *set, int signum);

  int sigismember(const sigset_t *set, int signum);



  8：信号屏蔽字/pending集的处理
  sigprocmask()  在信号相应的那个mask位图  给了我们人为的方式来干扰信号的状态 
  不能够确定信号什么时候到来，但是我们能够通过这个函数来确定信号什么时候被相应
  sigpending()



  9：sigsuspend()
  sigaction()
  setitimer()   好处是误差不累计


  10:实时信号
  标准信号会丢失，没有顺序要求
  进一步解决标准信号的不足
  实时信号的响应有顺序，但是没有特定的值
  kill -l 可以查看信号命令集
  信号存放在/usr/include/bits/signum.h中
  
  二：线程

posix线程是一套标准而不是实现
别的标准比如：openmp标准线程

线程标识：pthread_t 
ps ax -L





1:线程概念：
可以理解成一个正在运行的函数
多个线程是兄弟关系，不分先后
2：线程创建：
 int pthread_equal(pthread_t t1, pthread_t t2);  比较线程ID 如果两个线程ID相同的话返回的是非0值，否则返回的0值 
 pthread_t pthread_self(void)  获取当前线程的线程标识
 int pthread_create(pthread_t *thread, const pthread_attr_t *attr,
                     void *(*start_routine) (void *), void *arg);  创建线程
                     thread 是创建线程的线程标识
                     attr是属性  只读不写   人为规定这个东西
                     void*(start_routine)(void*) 这个扔出去并列跑的线程,也就是个函数
                     参数是void* arg  就是函数的参数
                     
成功返回0，失败返回的是error number    

线程的调度取决于调度器策略
线程终止
3种方式：
1：线程从启动例程返回，返回值就是线程的退出码
2：线程可以被统一进程中的其他线程取消
3：线程调用 pthread_exit()函数 相当于进程中的exit()函数  
 void pthread_exit(void *retval);
 int pthread_join(pthread_t thread, void **retval);   相当于进程中的wait函数  相当于线程收尸
线程取消
线程在执行过程中一定会用到线程的取消
线程正在跑的话是没有办法通过pthread_join将这个线程进行收尸的，因此要用到pthread_cancel
pthread_cancel()
 int pthread_cancel(pthread_t thread);


栈的清理
pthread_cleanup_push();   
pthread_cleanup_pop();
]这两个不是函数是宏定义
  void pthread_cleanup_push(void (*routine)(void *),void *arg);
  void pthread_cleanup_pop(int execute);
    execute 1表示调用 0表示只弹栈不调用
有多少个push就有多少个pop，否则程序会出错

3：线程同步
4：线程属性
线程同步的属性
5：
  重入
  线程和信号的关系
  线程与fork




